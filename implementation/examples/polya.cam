-- Polyas urn implementation of Beta/Bernoulli, via local state
-- Equivalent to betabernoulli.cam
do boolToInt <- return (fun b -> if b then return 1 else return 0) in
do countSuccesses <- return rec countSuccesses n f ->
   if n == 0 then return 0 else do i <- countSuccesses (n-1) f in i + boolToInt (f ())
in
with handler {
  return x  -> return (fun _ -> return x),
  get(a; k) -> return (fun s -> k (s a) s),
  set(x; k) -> return (fun s -> k () (fun a -> if a == fst x then snd x else s a)),
  ref(x; k) -> do a <- !new () in return (fun s ->
    k a (fun b -> if b == a then return x else s b)),
  finally s -> s (fun _ -> return ())
} handle (
  with handler {
    newproc(z; k) -> k(!ref(1,1)),
    sample(a; k) ->
      do ij <- !get a in
      do i <- fst ij in do j <- snd ij in
      do b <- !bernoulli (i/(i+j)) in
      do n <- boolToInt b in
      (!set(a,(i+n,j+(1-n))) ; k b)
  } handle (
    -- Make a new urn, and draw ten times, reporting the number of trues
    do a1 <- !newproc() in
    countSuccesses 10 (fun _ -> !sample a1)
  )
)
