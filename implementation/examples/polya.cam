do comment <- return "Polyas urn implementation of Beta/Bernoulli, via local state" in
do comment <- return "Equivalent to betabernoulli.cam" in
do boolToInt <- return (fun b -> if b then return 1 else return 0) in
do countSuccesses <- return rec countSuccesses n f ->
   if n == 0 then return 0 else do i <- countSuccesses (n-1) f in i + boolToInt (f ())
in 
do f <- with handler {
  return x  -> return (fun s -> return (x, s)),
  get(a; k) -> return (fun s -> k (s a) s),
  set(x; k) -> return (fun s -> k () (fun a -> if a == fst x then snd x else s a)),
  ref(x; k) -> return (fun s -> do a <- !new () in
    k a (fun b -> if b == a then return x else s b))
} handle
(
with handler {
  return x -> return x,
  newproc(z; k) -> k(!ref(1,1)),
  sample(a; k) ->
    do ij <- !get a in
    do i <- fst ij in do j <- snd ij in 
    do b <- !bernoulli (i/(i+j)) in 
    do n <- boolToInt b in
		(!set(a,(i+n,j+(1-n))) ; k b)
} handle (
  do comment <- return "Make a new urn, and draw ten times, reporting the number of trues." in
  do a1 <- !newproc() in
  countSuccesses 10 (fun z -> !sample a1)
)
)
in fst (f (fun b -> return ()))
