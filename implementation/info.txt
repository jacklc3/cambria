-----------------------------------------------------------------------------
Info file generated by Happy Version 2.1.7 from src/Parsing/Parser.y
-----------------------------------------------------------------------------

state 34 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_expr -> expr                                (0)
	expr -> value                                      (1)
	expr -> comp                                       (2)
	expr -> '(' expr ')'                               (3)
	exprInfix -> atom                                  (4)
	exprInfix -> compInfix                             (5)
	exprInfix -> '(' expr ')'                          (6)
	exprApp -> atom                                    (7)
	exprApp -> compApp                                 (8)
	exprApp -> '(' expr ')'                            (9)
	exprAtom -> atom                                   (10)
	exprAtom -> '(' expr ')'                           (11)
	nvar -> var                                        (12)
	nvar -> '_'                                        (13)
	nvars -> nvars nvar                                (14)
	nvars -> nvar                                      (15)
	value -> atom                                      (16)
	value -> inl exprAtom                              (17)
	value -> inr exprAtom                              (18)
	value -> fun nvars '->' comp                       (19)
	value -> rec nvar nvars '->' comp                  (20)
	value -> handler '{' handlerClauses '}'            (21)
	atom -> '()'                                       (22)
	atom -> bool                                       (23)
	atom -> int                                        (24)
	atom -> string                                     (25)
	atom -> '(' expr ',' expr ')'                      (26)
	atom -> var                                        (27)
	handlerClauses -> handlerClauses ',' handlerClause   (28)
	handlerClauses -> handlerClause                    (29)
	handlerClauses ->                                  (30)
	handlerClause -> return nvar '->' comp             (31)
	handlerClause -> var '(' nvar ';' nvar ')' '->' comp   (32)
	handlerClause -> finally nvar '->' comp            (33)
	comp -> compTerm ';' comp                          (34)
	comp -> compTerm                                   (35)
	compTerm -> return expr                            (36)
	compTerm -> op exprAtom                            (37)
	compTerm -> do nvar '<-' comp in compTerm          (38)
	compTerm -> if expr then comp else compTerm        (39)
	compTerm -> case expr of '{' eitherMatch '}'       (40)
	compTerm -> with expr handle compTerm              (41)
	compTerm -> compInfix                              (42)
	compInfix -> exprInfix '==' exprInfix              (43)
	compInfix -> exprInfix '++' exprInfix              (44)
	compInfix -> exprInfix '+' exprInfix               (45)
	compInfix -> exprInfix '-' exprInfix               (46)
	compInfix -> exprInfix '*' exprInfix               (47)
	compInfix -> exprInfix '/' exprInfix               (48)
	compInfix -> compApp                               (49)
	compApp -> exprApp exprAtom                        (50)
	compApp -> '(' comp ')'                            (51)
	eitherMatch -> inlMatch ',' inrMatch               (52)
	eitherMatch -> inrMatch ',' inlMatch               (53)
	inlMatch -> inl nvar '->' comp                     (54)
	inrMatch -> inr nvar '->' comp                     (55)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	fun            { Token _ TokFun }
	rec            { Token _ TokRec }
	handler        { Token _ TokHandler }
	return         { Token _ TokReturn }
	finally        { Token _ TokFinally }
	do             { Token _ TokDo }
	in             { Token _ TokIn }
	if             { Token _ TokIf }
	then           { Token _ TokThen }
	else           { Token _ TokElse }
	with           { Token _ TokWith }
	handle         { Token _ TokHandle }
	inl            { Token _ TokInl }
	inr            { Token _ TokInr }
	case           { Token _ TokCase }
	of             { Token _ TokOf }
	'()'           { Token _ TokUnit }
	'=='           { Token _ TokEq }
	'->'           { Token _ TokArrow }
	'<-'           { Token _ TokLeftArrow }
	'+'            { Token _ TokPlus }
	'-'            { Token _ TokMinus }
	'*'            { Token _ TokAsterisk }
	'/'            { Token _ TokSlash }
	'('            { Token _ TokLParen }
	')'            { Token _ TokRParen }
	'{'            { Token _ TokLBrace }
	'}'            { Token _ TokRBrace }
	','            { Token _ TokComma }
	'_'            { Token _ TokUnderscore }
	';'            { Token _ TokSemiColon }
	'++'           { Token _ TokConcat }
	int            { Token _ (TokInt $$) }
	bool           { Token _ (TokBool $$) }
	string         { Token _ (TokString $$) }
	var            { Token _ (TokIdent $$) }
	op             { Token _ (TokOp $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_expr     rule  0
	expr            rules 1, 2, 3
	exprInfix       rules 4, 5, 6
	exprApp         rules 7, 8, 9
	exprAtom        rules 10, 11
	nvar            rules 12, 13
	nvars           rules 14, 15
	value           rules 16, 17, 18, 19, 20, 21
	atom            rules 22, 23, 24, 25, 26, 27
	handlerClauses  rules 28, 29, 30
	handlerClause   rules 31, 32, 33
	comp            rules 34, 35
	compTerm        rules 36, 37, 38, 39, 40, 41, 42
	compInfix       rules 43, 44, 45, 46, 47, 48, 49
	compApp         rules 50, 51
	eitherMatch     rules 52, 53
	inlMatch        rule  54
	inrMatch        rule  55

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_expr -> . expr                               (rule 0)

	fun            shift, and enter state 4
	rec            shift, and enter state 5
	handler        shift, and enter state 6
	return         shift, and enter state 23
	do             shift, and enter state 24
	if             shift, and enter state 25
	with           shift, and enter state 26
	inl            shift, and enter state 7
	inr            shift, and enter state 8
	case           shift, and enter state 27
	'()'           shift, and enter state 9
	'('            shift, and enter state 28
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14
	op             shift, and enter state 29

	expr           goto state 15
	exprInfix      goto state 16
	exprApp        goto state 17
	value          goto state 2
	atom           goto state 18
	comp           goto state 19
	compTerm       goto state 20
	compInfix      goto state 21
	compApp        goto state 22

State 1

	expr -> . value                                     (rule 1)

	fun            shift, and enter state 4
	rec            shift, and enter state 5
	handler        shift, and enter state 6
	inl            shift, and enter state 7
	inr            shift, and enter state 8
	'()'           shift, and enter state 9
	'('            shift, and enter state 10
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14

	value          goto state 2
	atom           goto state 3

State 2

	expr -> value .                                     (rule 1)

	in             reduce using rule 1
	then           reduce using rule 1
	else           reduce using rule 1
	handle         reduce using rule 1
	of             reduce using rule 1
	')'            reduce using rule 1
	'}'            reduce using rule 1
	','            reduce using rule 1
	';'            reduce using rule 1
	%eof           reduce using rule 1


State 3

	value -> atom .                                     (rule 16)



State 4

	value -> fun . nvars '->' comp                      (rule 19)

	'_'            shift, and enter state 39
	var            shift, and enter state 40

	nvar           goto state 55
	nvars          goto state 56

State 5

	value -> rec . nvar nvars '->' comp                 (rule 20)

	'_'            shift, and enter state 39
	var            shift, and enter state 40

	nvar           goto state 54

State 6

	value -> handler . '{' handlerClauses '}'           (rule 21)

	'{'            shift, and enter state 53


State 7

	value -> inl . exprAtom                             (rule 17)

	'()'           shift, and enter state 9
	'('            shift, and enter state 32
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14

	exprAtom       goto state 52
	atom           goto state 31

State 8

	value -> inr . exprAtom                             (rule 18)

	'()'           shift, and enter state 9
	'('            shift, and enter state 32
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14

	exprAtom       goto state 51
	atom           goto state 31

State 9

	atom -> '()' .                                      (rule 22)

	in             reduce using rule 22
	then           reduce using rule 22
	else           reduce using rule 22
	handle         reduce using rule 22
	of             reduce using rule 22
	'()'           reduce using rule 22
	'=='           reduce using rule 22
	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'*'            reduce using rule 22
	'/'            reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	'}'            reduce using rule 22
	','            reduce using rule 22
	';'            reduce using rule 22
	'++'           reduce using rule 22
	int            reduce using rule 22
	bool           reduce using rule 22
	string         reduce using rule 22
	var            reduce using rule 22
	%eof           reduce using rule 22


State 10

	atom -> '(' . expr ',' expr ')'                     (rule 26)

	fun            shift, and enter state 4
	rec            shift, and enter state 5
	handler        shift, and enter state 6
	return         shift, and enter state 23
	do             shift, and enter state 24
	if             shift, and enter state 25
	with           shift, and enter state 26
	inl            shift, and enter state 7
	inr            shift, and enter state 8
	case           shift, and enter state 27
	'()'           shift, and enter state 9
	'('            shift, and enter state 28
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14
	op             shift, and enter state 29

	expr           goto state 50
	exprInfix      goto state 16
	exprApp        goto state 17
	value          goto state 2
	atom           goto state 18
	comp           goto state 19
	compTerm       goto state 20
	compInfix      goto state 21
	compApp        goto state 22

State 11

	atom -> int .                                       (rule 24)

	in             reduce using rule 24
	then           reduce using rule 24
	else           reduce using rule 24
	handle         reduce using rule 24
	of             reduce using rule 24
	'()'           reduce using rule 24
	'=='           reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            reduce using rule 24
	'/'            reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	'}'            reduce using rule 24
	','            reduce using rule 24
	';'            reduce using rule 24
	'++'           reduce using rule 24
	int            reduce using rule 24
	bool           reduce using rule 24
	string         reduce using rule 24
	var            reduce using rule 24
	%eof           reduce using rule 24


State 12

	atom -> bool .                                      (rule 23)

	in             reduce using rule 23
	then           reduce using rule 23
	else           reduce using rule 23
	handle         reduce using rule 23
	of             reduce using rule 23
	'()'           reduce using rule 23
	'=='           reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            reduce using rule 23
	'/'            reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	'}'            reduce using rule 23
	','            reduce using rule 23
	';'            reduce using rule 23
	'++'           reduce using rule 23
	int            reduce using rule 23
	bool           reduce using rule 23
	string         reduce using rule 23
	var            reduce using rule 23
	%eof           reduce using rule 23


State 13

	atom -> string .                                    (rule 25)

	in             reduce using rule 25
	then           reduce using rule 25
	else           reduce using rule 25
	handle         reduce using rule 25
	of             reduce using rule 25
	'()'           reduce using rule 25
	'=='           reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	'/'            reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	'}'            reduce using rule 25
	','            reduce using rule 25
	';'            reduce using rule 25
	'++'           reduce using rule 25
	int            reduce using rule 25
	bool           reduce using rule 25
	string         reduce using rule 25
	var            reduce using rule 25
	%eof           reduce using rule 25


State 14

	atom -> var .                                       (rule 27)

	in             reduce using rule 27
	then           reduce using rule 27
	else           reduce using rule 27
	handle         reduce using rule 27
	of             reduce using rule 27
	'()'           reduce using rule 27
	'=='           reduce using rule 27
	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'*'            reduce using rule 27
	'/'            reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	'}'            reduce using rule 27
	','            reduce using rule 27
	';'            reduce using rule 27
	'++'           reduce using rule 27
	int            reduce using rule 27
	bool           reduce using rule 27
	string         reduce using rule 27
	var            reduce using rule 27
	%eof           reduce using rule 27


State 15

	%start_expr -> expr .                               (rule 0)

	%eof           accept


State 16

	compInfix -> exprInfix . '==' exprInfix             (rule 43)
	compInfix -> exprInfix . '++' exprInfix             (rule 44)
	compInfix -> exprInfix . '+' exprInfix              (rule 45)
	compInfix -> exprInfix . '-' exprInfix              (rule 46)
	compInfix -> exprInfix . '*' exprInfix              (rule 47)
	compInfix -> exprInfix . '/' exprInfix              (rule 48)

	'=='           shift, and enter state 44
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'++'           shift, and enter state 49


State 17

	compApp -> exprApp . exprAtom                       (rule 50)

	'()'           shift, and enter state 9
	'('            shift, and enter state 32
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14

	exprAtom       goto state 43
	atom           goto state 31

State 18

	exprInfix -> atom .                                 (rule 4)
	exprApp -> atom .                                   (rule 7)
	value -> atom .                                     (rule 16)

	in             reduce using rule 16
	then           reduce using rule 16
	else           reduce using rule 16
	handle         reduce using rule 16
	of             reduce using rule 16
	'()'           reduce using rule 7
	'=='           reduce using rule 4
	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'*'            reduce using rule 4
	'/'            reduce using rule 4
	'('            reduce using rule 7
	')'            reduce using rule 16
	'}'            reduce using rule 16
	','            reduce using rule 16
	';'            reduce using rule 16
	'++'           reduce using rule 4
	int            reduce using rule 7
	bool           reduce using rule 7
	string         reduce using rule 7
	var            reduce using rule 7
	%eof           reduce using rule 16


State 19

	expr -> comp .                                      (rule 2)

	in             reduce using rule 2
	then           reduce using rule 2
	else           reduce using rule 2
	handle         reduce using rule 2
	of             reduce using rule 2
	')'            reduce using rule 2
	'}'            reduce using rule 2
	','            reduce using rule 2
	';'            reduce using rule 2
	%eof           reduce using rule 2


State 20

	comp -> compTerm . ';' comp                         (rule 34)
	comp -> compTerm .                                  (rule 35)

	in             reduce using rule 35
	then           reduce using rule 35
	else           reduce using rule 35
	handle         reduce using rule 35
	of             reduce using rule 35
	')'            reduce using rule 35
	'}'            reduce using rule 35
	','            reduce using rule 35
	';'            shift, and enter state 42
	%eof           reduce using rule 35


State 21

	exprInfix -> compInfix .                            (rule 5)
	compTerm -> compInfix .                             (rule 42)

	in             reduce using rule 42
	then           reduce using rule 42
	else           reduce using rule 42
	handle         reduce using rule 42
	of             reduce using rule 42
	'=='           reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            reduce using rule 5
	'/'            reduce using rule 5
	')'            reduce using rule 42
	'}'            reduce using rule 42
	','            reduce using rule 42
	';'            reduce using rule 42
	'++'           reduce using rule 5
	%eof           reduce using rule 42


State 22

	exprApp -> compApp .                                (rule 8)
	compInfix -> compApp .                              (rule 49)

	in             reduce using rule 49
	then           reduce using rule 49
	else           reduce using rule 49
	handle         reduce using rule 49
	of             reduce using rule 49
	'()'           reduce using rule 8
	'=='           reduce using rule 49
	'+'            reduce using rule 49
	'-'            reduce using rule 49
	'*'            reduce using rule 49
	'/'            reduce using rule 49
	'('            reduce using rule 8
	')'            reduce using rule 49
	'}'            reduce using rule 49
	','            reduce using rule 49
	';'            reduce using rule 49
	'++'           reduce using rule 49
	int            reduce using rule 8
	bool           reduce using rule 8
	string         reduce using rule 8
	var            reduce using rule 8
	%eof           reduce using rule 49


State 23

	compTerm -> return . expr                           (rule 36)

	fun            shift, and enter state 4
	rec            shift, and enter state 5
	handler        shift, and enter state 6
	return         shift, and enter state 23
	do             shift, and enter state 24
	if             shift, and enter state 25
	with           shift, and enter state 26
	inl            shift, and enter state 7
	inr            shift, and enter state 8
	case           shift, and enter state 27
	'()'           shift, and enter state 9
	'('            shift, and enter state 28
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14
	op             shift, and enter state 29

	expr           goto state 41
	exprInfix      goto state 16
	exprApp        goto state 17
	value          goto state 2
	atom           goto state 18
	comp           goto state 19
	compTerm       goto state 20
	compInfix      goto state 21
	compApp        goto state 22

State 24

	compTerm -> do . nvar '<-' comp in compTerm         (rule 38)

	'_'            shift, and enter state 39
	var            shift, and enter state 40

	nvar           goto state 38

State 25

	compTerm -> if . expr then comp else compTerm       (rule 39)

	fun            shift, and enter state 4
	rec            shift, and enter state 5
	handler        shift, and enter state 6
	return         shift, and enter state 23
	do             shift, and enter state 24
	if             shift, and enter state 25
	with           shift, and enter state 26
	inl            shift, and enter state 7
	inr            shift, and enter state 8
	case           shift, and enter state 27
	'()'           shift, and enter state 9
	'('            shift, and enter state 28
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14
	op             shift, and enter state 29

	expr           goto state 37
	exprInfix      goto state 16
	exprApp        goto state 17
	value          goto state 2
	atom           goto state 18
	comp           goto state 19
	compTerm       goto state 20
	compInfix      goto state 21
	compApp        goto state 22

State 26

	compTerm -> with . expr handle compTerm             (rule 41)

	fun            shift, and enter state 4
	rec            shift, and enter state 5
	handler        shift, and enter state 6
	return         shift, and enter state 23
	do             shift, and enter state 24
	if             shift, and enter state 25
	with           shift, and enter state 26
	inl            shift, and enter state 7
	inr            shift, and enter state 8
	case           shift, and enter state 27
	'()'           shift, and enter state 9
	'('            shift, and enter state 28
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14
	op             shift, and enter state 29

	expr           goto state 36
	exprInfix      goto state 16
	exprApp        goto state 17
	value          goto state 2
	atom           goto state 18
	comp           goto state 19
	compTerm       goto state 20
	compInfix      goto state 21
	compApp        goto state 22

State 27

	compTerm -> case . expr of '{' eitherMatch '}'      (rule 40)

	fun            shift, and enter state 4
	rec            shift, and enter state 5
	handler        shift, and enter state 6
	return         shift, and enter state 23
	do             shift, and enter state 24
	if             shift, and enter state 25
	with           shift, and enter state 26
	inl            shift, and enter state 7
	inr            shift, and enter state 8
	case           shift, and enter state 27
	'()'           shift, and enter state 9
	'('            shift, and enter state 28
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14
	op             shift, and enter state 29

	expr           goto state 35
	exprInfix      goto state 16
	exprApp        goto state 17
	value          goto state 2
	atom           goto state 18
	comp           goto state 19
	compTerm       goto state 20
	compInfix      goto state 21
	compApp        goto state 22

State 28

	expr -> '(' . expr ')'                              (rule 3)
	exprInfix -> '(' . expr ')'                         (rule 6)
	exprApp -> '(' . expr ')'                           (rule 9)
	atom -> '(' . expr ',' expr ')'                     (rule 26)
	compApp -> '(' . comp ')'                           (rule 51)

	fun            shift, and enter state 4
	rec            shift, and enter state 5
	handler        shift, and enter state 6
	return         shift, and enter state 23
	do             shift, and enter state 24
	if             shift, and enter state 25
	with           shift, and enter state 26
	inl            shift, and enter state 7
	inr            shift, and enter state 8
	case           shift, and enter state 27
	'()'           shift, and enter state 9
	'('            shift, and enter state 28
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14
	op             shift, and enter state 29

	expr           goto state 33
	exprInfix      goto state 16
	exprApp        goto state 17
	value          goto state 2
	atom           goto state 18
	comp           goto state 34
	compTerm       goto state 20
	compInfix      goto state 21
	compApp        goto state 22

State 29

	compTerm -> op . exprAtom                           (rule 37)

	'()'           shift, and enter state 9
	'('            shift, and enter state 32
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14

	exprAtom       goto state 30
	atom           goto state 31

State 30

	compTerm -> op exprAtom .                           (rule 37)

	in             reduce using rule 37
	then           reduce using rule 37
	else           reduce using rule 37
	handle         reduce using rule 37
	of             reduce using rule 37
	')'            reduce using rule 37
	'}'            reduce using rule 37
	','            reduce using rule 37
	';'            reduce using rule 37
	%eof           reduce using rule 37


State 31

	exprAtom -> atom .                                  (rule 10)

	in             reduce using rule 10
	then           reduce using rule 10
	else           reduce using rule 10
	handle         reduce using rule 10
	of             reduce using rule 10
	'()'           reduce using rule 10
	'=='           reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            reduce using rule 10
	'/'            reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	'}'            reduce using rule 10
	','            reduce using rule 10
	';'            reduce using rule 10
	'++'           reduce using rule 10
	int            reduce using rule 10
	bool           reduce using rule 10
	string         reduce using rule 10
	var            reduce using rule 10
	%eof           reduce using rule 10


State 32

	exprAtom -> '(' . expr ')'                          (rule 11)
	atom -> '(' . expr ',' expr ')'                     (rule 26)

	fun            shift, and enter state 4
	rec            shift, and enter state 5
	handler        shift, and enter state 6
	return         shift, and enter state 23
	do             shift, and enter state 24
	if             shift, and enter state 25
	with           shift, and enter state 26
	inl            shift, and enter state 7
	inr            shift, and enter state 8
	case           shift, and enter state 27
	'()'           shift, and enter state 9
	'('            shift, and enter state 28
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14
	op             shift, and enter state 29

	expr           goto state 82
	exprInfix      goto state 16
	exprApp        goto state 17
	value          goto state 2
	atom           goto state 18
	comp           goto state 19
	compTerm       goto state 20
	compInfix      goto state 21
	compApp        goto state 22

State 33

	expr -> '(' expr . ')'                              (rule 3)
	exprInfix -> '(' expr . ')'                         (rule 6)
	exprApp -> '(' expr . ')'                           (rule 9)
	atom -> '(' expr . ',' expr ')'                     (rule 26)

	')'            shift, and enter state 81
	','            shift, and enter state 65


State 34

	expr -> comp .                                      (rule 2)
	compApp -> '(' comp . ')'                           (rule 51)

	')'            shift, and enter state 80
			(reduce using rule 2)

	','            reduce using rule 2


State 35

	compTerm -> case expr . of '{' eitherMatch '}'      (rule 40)

	of             shift, and enter state 79


State 36

	compTerm -> with expr . handle compTerm             (rule 41)

	handle         shift, and enter state 78


State 37

	compTerm -> if expr . then comp else compTerm       (rule 39)

	then           shift, and enter state 77


State 38

	compTerm -> do nvar . '<-' comp in compTerm         (rule 38)

	'<-'           shift, and enter state 76


State 39

	nvar -> '_' .                                       (rule 13)

	'->'           reduce using rule 13
	'<-'           reduce using rule 13
	')'            reduce using rule 13
	'_'            reduce using rule 13
	';'            reduce using rule 13
	var            reduce using rule 13


State 40

	nvar -> var .                                       (rule 12)

	'->'           reduce using rule 12
	'<-'           reduce using rule 12
	')'            reduce using rule 12
	'_'            reduce using rule 12
	';'            reduce using rule 12
	var            reduce using rule 12


State 41

	compTerm -> return expr .                           (rule 36)

	in             reduce using rule 36
	then           reduce using rule 36
	else           reduce using rule 36
	handle         reduce using rule 36
	of             reduce using rule 36
	')'            reduce using rule 36
	'}'            reduce using rule 36
	','            reduce using rule 36
	';'            reduce using rule 36
	%eof           reduce using rule 36


State 42

	comp -> compTerm ';' . comp                         (rule 34)

	return         shift, and enter state 23
	do             shift, and enter state 24
	if             shift, and enter state 25
	with           shift, and enter state 26
	case           shift, and enter state 27
	'()'           shift, and enter state 9
	'('            shift, and enter state 69
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14
	op             shift, and enter state 29

	exprInfix      goto state 16
	exprApp        goto state 17
	atom           goto state 67
	comp           goto state 75
	compTerm       goto state 20
	compInfix      goto state 21
	compApp        goto state 22

State 43

	compApp -> exprApp exprAtom .                       (rule 50)

	in             reduce using rule 50
	then           reduce using rule 50
	else           reduce using rule 50
	handle         reduce using rule 50
	of             reduce using rule 50
	'()'           reduce using rule 50
	'=='           reduce using rule 50
	'+'            reduce using rule 50
	'-'            reduce using rule 50
	'*'            reduce using rule 50
	'/'            reduce using rule 50
	'('            reduce using rule 50
	')'            reduce using rule 50
	'}'            reduce using rule 50
	','            reduce using rule 50
	';'            reduce using rule 50
	'++'           reduce using rule 50
	int            reduce using rule 50
	bool           reduce using rule 50
	string         reduce using rule 50
	var            reduce using rule 50
	%eof           reduce using rule 50


State 44

	compInfix -> exprInfix '==' . exprInfix             (rule 43)

	'()'           shift, and enter state 9
	'('            shift, and enter state 69
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14

	exprInfix      goto state 74
	exprApp        goto state 17
	atom           goto state 67
	compInfix      goto state 68
	compApp        goto state 22

State 45

	compInfix -> exprInfix '+' . exprInfix              (rule 45)

	'()'           shift, and enter state 9
	'('            shift, and enter state 69
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14

	exprInfix      goto state 73
	exprApp        goto state 17
	atom           goto state 67
	compInfix      goto state 68
	compApp        goto state 22

State 46

	compInfix -> exprInfix '-' . exprInfix              (rule 46)

	'()'           shift, and enter state 9
	'('            shift, and enter state 69
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14

	exprInfix      goto state 72
	exprApp        goto state 17
	atom           goto state 67
	compInfix      goto state 68
	compApp        goto state 22

State 47

	compInfix -> exprInfix '*' . exprInfix              (rule 47)

	'()'           shift, and enter state 9
	'('            shift, and enter state 69
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14

	exprInfix      goto state 71
	exprApp        goto state 17
	atom           goto state 67
	compInfix      goto state 68
	compApp        goto state 22

State 48

	compInfix -> exprInfix '/' . exprInfix              (rule 48)

	'()'           shift, and enter state 9
	'('            shift, and enter state 69
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14

	exprInfix      goto state 70
	exprApp        goto state 17
	atom           goto state 67
	compInfix      goto state 68
	compApp        goto state 22

State 49

	compInfix -> exprInfix '++' . exprInfix             (rule 44)

	'()'           shift, and enter state 9
	'('            shift, and enter state 69
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14

	exprInfix      goto state 66
	exprApp        goto state 17
	atom           goto state 67
	compInfix      goto state 68
	compApp        goto state 22

State 50

	atom -> '(' expr . ',' expr ')'                     (rule 26)

	','            shift, and enter state 65


State 51

	value -> inr exprAtom .                             (rule 18)

	in             reduce using rule 18
	then           reduce using rule 18
	else           reduce using rule 18
	handle         reduce using rule 18
	of             reduce using rule 18
	')'            reduce using rule 18
	'}'            reduce using rule 18
	','            reduce using rule 18
	';'            reduce using rule 18
	%eof           reduce using rule 18


State 52

	value -> inl exprAtom .                             (rule 17)

	in             reduce using rule 17
	then           reduce using rule 17
	else           reduce using rule 17
	handle         reduce using rule 17
	of             reduce using rule 17
	')'            reduce using rule 17
	'}'            reduce using rule 17
	','            reduce using rule 17
	';'            reduce using rule 17
	%eof           reduce using rule 17


State 53

	value -> handler '{' . handlerClauses '}'           (rule 21)

	return         shift, and enter state 62
	finally        shift, and enter state 63
	'}'            reduce using rule 30
	','            reduce using rule 30
	var            shift, and enter state 64

	handlerClauses goto state 60
	handlerClause  goto state 61

State 54

	value -> rec nvar . nvars '->' comp                 (rule 20)

	'_'            shift, and enter state 39
	var            shift, and enter state 40

	nvar           goto state 55
	nvars          goto state 59

State 55

	nvars -> nvar .                                     (rule 15)

	'->'           reduce using rule 15
	'_'            reduce using rule 15
	var            reduce using rule 15


State 56

	nvars -> nvars . nvar                               (rule 14)
	value -> fun nvars . '->' comp                      (rule 19)

	'->'           shift, and enter state 58
	'_'            shift, and enter state 39
	var            shift, and enter state 40

	nvar           goto state 57

State 57

	nvars -> nvars nvar .                               (rule 14)

	'->'           reduce using rule 14
	'_'            reduce using rule 14
	var            reduce using rule 14


State 58

	value -> fun nvars '->' . comp                      (rule 19)

	return         shift, and enter state 23
	do             shift, and enter state 24
	if             shift, and enter state 25
	with           shift, and enter state 26
	case           shift, and enter state 27
	'()'           shift, and enter state 9
	'('            shift, and enter state 69
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14
	op             shift, and enter state 29

	exprInfix      goto state 16
	exprApp        goto state 17
	atom           goto state 67
	comp           goto state 96
	compTerm       goto state 20
	compInfix      goto state 21
	compApp        goto state 22

State 59

	nvars -> nvars . nvar                               (rule 14)
	value -> rec nvar nvars . '->' comp                 (rule 20)

	'->'           shift, and enter state 95
	'_'            shift, and enter state 39
	var            shift, and enter state 40

	nvar           goto state 57

State 60

	value -> handler '{' handlerClauses . '}'           (rule 21)
	handlerClauses -> handlerClauses . ',' handlerClause    (rule 28)

	'}'            shift, and enter state 93
	','            shift, and enter state 94


State 61

	handlerClauses -> handlerClause .                   (rule 29)

	'}'            reduce using rule 29
	','            reduce using rule 29


State 62

	handlerClause -> return . nvar '->' comp            (rule 31)

	'_'            shift, and enter state 39
	var            shift, and enter state 40

	nvar           goto state 92

State 63

	handlerClause -> finally . nvar '->' comp           (rule 33)

	'_'            shift, and enter state 39
	var            shift, and enter state 40

	nvar           goto state 91

State 64

	handlerClause -> var . '(' nvar ';' nvar ')' '->' comp    (rule 32)

	'('            shift, and enter state 90


State 65

	atom -> '(' expr ',' . expr ')'                     (rule 26)

	fun            shift, and enter state 4
	rec            shift, and enter state 5
	handler        shift, and enter state 6
	return         shift, and enter state 23
	do             shift, and enter state 24
	if             shift, and enter state 25
	with           shift, and enter state 26
	inl            shift, and enter state 7
	inr            shift, and enter state 8
	case           shift, and enter state 27
	'()'           shift, and enter state 9
	'('            shift, and enter state 28
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14
	op             shift, and enter state 29

	expr           goto state 89
	exprInfix      goto state 16
	exprApp        goto state 17
	value          goto state 2
	atom           goto state 18
	comp           goto state 19
	compTerm       goto state 20
	compInfix      goto state 21
	compApp        goto state 22

State 66

	compInfix -> exprInfix . '==' exprInfix             (rule 43)
	compInfix -> exprInfix . '++' exprInfix             (rule 44)
	compInfix -> exprInfix '++' exprInfix .             (rule 44)
	compInfix -> exprInfix . '+' exprInfix              (rule 45)
	compInfix -> exprInfix . '-' exprInfix              (rule 46)
	compInfix -> exprInfix . '*' exprInfix              (rule 47)
	compInfix -> exprInfix . '/' exprInfix              (rule 48)

	in             reduce using rule 44
	then           reduce using rule 44
	else           reduce using rule 44
	handle         reduce using rule 44
	of             reduce using rule 44
	'=='           reduce using rule 44
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	')'            reduce using rule 44
	'}'            reduce using rule 44
	','            reduce using rule 44
	';'            reduce using rule 44
	'++'           reduce using rule 44
	%eof           reduce using rule 44


State 67

	exprInfix -> atom .                                 (rule 4)
	exprApp -> atom .                                   (rule 7)

	in             reduce using rule 4
	then           reduce using rule 4
	else           reduce using rule 4
	handle         reduce using rule 4
	of             reduce using rule 4
	'()'           reduce using rule 7
	'=='           reduce using rule 4
	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'*'            reduce using rule 4
	'/'            reduce using rule 4
	'('            reduce using rule 7
	')'            reduce using rule 4
	'}'            reduce using rule 4
	','            reduce using rule 4
	';'            reduce using rule 4
	'++'           reduce using rule 4
	int            reduce using rule 7
	bool           reduce using rule 7
	string         reduce using rule 7
	var            reduce using rule 7
	%eof           reduce using rule 4


State 68

	exprInfix -> compInfix .                            (rule 5)

	in             reduce using rule 5
	then           reduce using rule 5
	else           reduce using rule 5
	handle         reduce using rule 5
	of             reduce using rule 5
	'=='           reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            reduce using rule 5
	'/'            reduce using rule 5
	')'            reduce using rule 5
	'}'            reduce using rule 5
	','            reduce using rule 5
	';'            reduce using rule 5
	'++'           reduce using rule 5
	%eof           reduce using rule 5


State 69

	exprInfix -> '(' . expr ')'                         (rule 6)
	exprApp -> '(' . expr ')'                           (rule 9)
	atom -> '(' . expr ',' expr ')'                     (rule 26)
	compApp -> '(' . comp ')'                           (rule 51)

	fun            shift, and enter state 4
	rec            shift, and enter state 5
	handler        shift, and enter state 6
	return         shift, and enter state 23
	do             shift, and enter state 24
	if             shift, and enter state 25
	with           shift, and enter state 26
	inl            shift, and enter state 7
	inr            shift, and enter state 8
	case           shift, and enter state 27
	'()'           shift, and enter state 9
	'('            shift, and enter state 28
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14
	op             shift, and enter state 29

	expr           goto state 88
	exprInfix      goto state 16
	exprApp        goto state 17
	value          goto state 2
	atom           goto state 18
	comp           goto state 34
	compTerm       goto state 20
	compInfix      goto state 21
	compApp        goto state 22

State 70

	compInfix -> exprInfix . '==' exprInfix             (rule 43)
	compInfix -> exprInfix . '++' exprInfix             (rule 44)
	compInfix -> exprInfix . '+' exprInfix              (rule 45)
	compInfix -> exprInfix . '-' exprInfix              (rule 46)
	compInfix -> exprInfix . '*' exprInfix              (rule 47)
	compInfix -> exprInfix . '/' exprInfix              (rule 48)
	compInfix -> exprInfix '/' exprInfix .              (rule 48)

	in             reduce using rule 48
	then           reduce using rule 48
	else           reduce using rule 48
	handle         reduce using rule 48
	of             reduce using rule 48
	'=='           reduce using rule 48
	'+'            reduce using rule 48
	'-'            reduce using rule 48
	'*'            reduce using rule 48
	'/'            reduce using rule 48
	')'            reduce using rule 48
	'}'            reduce using rule 48
	','            reduce using rule 48
	';'            reduce using rule 48
	'++'           reduce using rule 48
	%eof           reduce using rule 48


State 71

	compInfix -> exprInfix . '==' exprInfix             (rule 43)
	compInfix -> exprInfix . '++' exprInfix             (rule 44)
	compInfix -> exprInfix . '+' exprInfix              (rule 45)
	compInfix -> exprInfix . '-' exprInfix              (rule 46)
	compInfix -> exprInfix . '*' exprInfix              (rule 47)
	compInfix -> exprInfix '*' exprInfix .              (rule 47)
	compInfix -> exprInfix . '/' exprInfix              (rule 48)

	in             reduce using rule 47
	then           reduce using rule 47
	else           reduce using rule 47
	handle         reduce using rule 47
	of             reduce using rule 47
	'=='           reduce using rule 47
	'+'            reduce using rule 47
	'-'            reduce using rule 47
	'*'            reduce using rule 47
	'/'            reduce using rule 47
	')'            reduce using rule 47
	'}'            reduce using rule 47
	','            reduce using rule 47
	';'            reduce using rule 47
	'++'           reduce using rule 47
	%eof           reduce using rule 47


State 72

	compInfix -> exprInfix . '==' exprInfix             (rule 43)
	compInfix -> exprInfix . '++' exprInfix             (rule 44)
	compInfix -> exprInfix . '+' exprInfix              (rule 45)
	compInfix -> exprInfix . '-' exprInfix              (rule 46)
	compInfix -> exprInfix '-' exprInfix .              (rule 46)
	compInfix -> exprInfix . '*' exprInfix              (rule 47)
	compInfix -> exprInfix . '/' exprInfix              (rule 48)

	in             reduce using rule 46
	then           reduce using rule 46
	else           reduce using rule 46
	handle         reduce using rule 46
	of             reduce using rule 46
	'=='           reduce using rule 46
	'+'            reduce using rule 46
	'-'            reduce using rule 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	')'            reduce using rule 46
	'}'            reduce using rule 46
	','            reduce using rule 46
	';'            reduce using rule 46
	'++'           reduce using rule 46
	%eof           reduce using rule 46


State 73

	compInfix -> exprInfix . '==' exprInfix             (rule 43)
	compInfix -> exprInfix . '++' exprInfix             (rule 44)
	compInfix -> exprInfix . '+' exprInfix              (rule 45)
	compInfix -> exprInfix '+' exprInfix .              (rule 45)
	compInfix -> exprInfix . '-' exprInfix              (rule 46)
	compInfix -> exprInfix . '*' exprInfix              (rule 47)
	compInfix -> exprInfix . '/' exprInfix              (rule 48)

	in             reduce using rule 45
	then           reduce using rule 45
	else           reduce using rule 45
	handle         reduce using rule 45
	of             reduce using rule 45
	'=='           reduce using rule 45
	'+'            reduce using rule 45
	'-'            reduce using rule 45
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	')'            reduce using rule 45
	'}'            reduce using rule 45
	','            reduce using rule 45
	';'            reduce using rule 45
	'++'           reduce using rule 45
	%eof           reduce using rule 45


State 74

	compInfix -> exprInfix . '==' exprInfix             (rule 43)
	compInfix -> exprInfix '==' exprInfix .             (rule 43)
	compInfix -> exprInfix . '++' exprInfix             (rule 44)
	compInfix -> exprInfix . '+' exprInfix              (rule 45)
	compInfix -> exprInfix . '-' exprInfix              (rule 46)
	compInfix -> exprInfix . '*' exprInfix              (rule 47)
	compInfix -> exprInfix . '/' exprInfix              (rule 48)

	in             reduce using rule 43
	then           reduce using rule 43
	else           reduce using rule 43
	handle         reduce using rule 43
	of             reduce using rule 43
	'=='           fail
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	')'            reduce using rule 43
	'}'            reduce using rule 43
	','            reduce using rule 43
	';'            reduce using rule 43
	'++'           shift, and enter state 49
	%eof           reduce using rule 43


State 75

	comp -> compTerm ';' comp .                         (rule 34)

	in             reduce using rule 34
	then           reduce using rule 34
	else           reduce using rule 34
	handle         reduce using rule 34
	of             reduce using rule 34
	')'            reduce using rule 34
	'}'            reduce using rule 34
	','            reduce using rule 34
	';'            reduce using rule 34
	%eof           reduce using rule 34


State 76

	compTerm -> do nvar '<-' . comp in compTerm         (rule 38)

	return         shift, and enter state 23
	do             shift, and enter state 24
	if             shift, and enter state 25
	with           shift, and enter state 26
	case           shift, and enter state 27
	'()'           shift, and enter state 9
	'('            shift, and enter state 69
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14
	op             shift, and enter state 29

	exprInfix      goto state 16
	exprApp        goto state 17
	atom           goto state 67
	comp           goto state 87
	compTerm       goto state 20
	compInfix      goto state 21
	compApp        goto state 22

State 77

	compTerm -> if expr then . comp else compTerm       (rule 39)

	return         shift, and enter state 23
	do             shift, and enter state 24
	if             shift, and enter state 25
	with           shift, and enter state 26
	case           shift, and enter state 27
	'()'           shift, and enter state 9
	'('            shift, and enter state 69
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14
	op             shift, and enter state 29

	exprInfix      goto state 16
	exprApp        goto state 17
	atom           goto state 67
	comp           goto state 86
	compTerm       goto state 20
	compInfix      goto state 21
	compApp        goto state 22

State 78

	compTerm -> with expr handle . compTerm             (rule 41)

	return         shift, and enter state 23
	do             shift, and enter state 24
	if             shift, and enter state 25
	with           shift, and enter state 26
	case           shift, and enter state 27
	'()'           shift, and enter state 9
	'('            shift, and enter state 69
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14
	op             shift, and enter state 29

	exprInfix      goto state 16
	exprApp        goto state 17
	atom           goto state 67
	compTerm       goto state 85
	compInfix      goto state 21
	compApp        goto state 22

State 79

	compTerm -> case expr of . '{' eitherMatch '}'      (rule 40)

	'{'            shift, and enter state 84


State 80

	compApp -> '(' comp ')' .                           (rule 51)

	in             reduce using rule 51
	then           reduce using rule 51
	else           reduce using rule 51
	handle         reduce using rule 51
	of             reduce using rule 51
	'()'           reduce using rule 51
	'=='           reduce using rule 51
	'+'            reduce using rule 51
	'-'            reduce using rule 51
	'*'            reduce using rule 51
	'/'            reduce using rule 51
	'('            reduce using rule 51
	')'            reduce using rule 51
	'}'            reduce using rule 51
	','            reduce using rule 51
	';'            reduce using rule 51
	'++'           reduce using rule 51
	int            reduce using rule 51
	bool           reduce using rule 51
	string         reduce using rule 51
	var            reduce using rule 51
	%eof           reduce using rule 51


State 81

	expr -> '(' expr ')' .                              (rule 3)
	exprInfix -> '(' expr ')' .                         (rule 6)
	exprApp -> '(' expr ')' .                           (rule 9)

	in             reduce using rule 3
	then           reduce using rule 3
	else           reduce using rule 3
	handle         reduce using rule 3
	of             reduce using rule 3
	'()'           reduce using rule 9
	'=='           reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            reduce using rule 6
	'/'            reduce using rule 6
	'('            reduce using rule 9
	')'            reduce using rule 3
	'}'            reduce using rule 3
	','            reduce using rule 3
	';'            reduce using rule 3
	'++'           reduce using rule 6
	int            reduce using rule 9
	bool           reduce using rule 9
	string         reduce using rule 9
	var            reduce using rule 9
	%eof           reduce using rule 3


State 82

	exprAtom -> '(' expr . ')'                          (rule 11)
	atom -> '(' expr . ',' expr ')'                     (rule 26)

	')'            shift, and enter state 83
	','            shift, and enter state 65


State 83

	exprAtom -> '(' expr ')' .                          (rule 11)

	in             reduce using rule 11
	then           reduce using rule 11
	else           reduce using rule 11
	handle         reduce using rule 11
	of             reduce using rule 11
	'()'           reduce using rule 11
	'=='           reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            reduce using rule 11
	'/'            reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	'}'            reduce using rule 11
	','            reduce using rule 11
	';'            reduce using rule 11
	'++'           reduce using rule 11
	int            reduce using rule 11
	bool           reduce using rule 11
	string         reduce using rule 11
	var            reduce using rule 11
	%eof           reduce using rule 11


State 84

	compTerm -> case expr of '{' . eitherMatch '}'      (rule 40)

	inl            shift, and enter state 109
	inr            shift, and enter state 110

	eitherMatch    goto state 106
	inlMatch       goto state 107
	inrMatch       goto state 108

State 85

	compTerm -> with expr handle compTerm .             (rule 41)

	in             reduce using rule 41
	then           reduce using rule 41
	else           reduce using rule 41
	handle         reduce using rule 41
	of             reduce using rule 41
	')'            reduce using rule 41
	'}'            reduce using rule 41
	','            reduce using rule 41
	';'            reduce using rule 41
	%eof           reduce using rule 41


State 86

	compTerm -> if expr then comp . else compTerm       (rule 39)

	else           shift, and enter state 105


State 87

	compTerm -> do nvar '<-' comp . in compTerm         (rule 38)

	in             shift, and enter state 104


State 88

	exprInfix -> '(' expr . ')'                         (rule 6)
	exprApp -> '(' expr . ')'                           (rule 9)
	atom -> '(' expr . ',' expr ')'                     (rule 26)

	')'            shift, and enter state 103
	','            shift, and enter state 65


State 89

	atom -> '(' expr ',' expr . ')'                     (rule 26)

	')'            shift, and enter state 102


State 90

	handlerClause -> var '(' . nvar ';' nvar ')' '->' comp    (rule 32)

	'_'            shift, and enter state 39
	var            shift, and enter state 40

	nvar           goto state 101

State 91

	handlerClause -> finally nvar . '->' comp           (rule 33)

	'->'           shift, and enter state 100


State 92

	handlerClause -> return nvar . '->' comp            (rule 31)

	'->'           shift, and enter state 99


State 93

	value -> handler '{' handlerClauses '}' .           (rule 21)

	in             reduce using rule 21
	then           reduce using rule 21
	else           reduce using rule 21
	handle         reduce using rule 21
	of             reduce using rule 21
	')'            reduce using rule 21
	'}'            reduce using rule 21
	','            reduce using rule 21
	';'            reduce using rule 21
	%eof           reduce using rule 21


State 94

	handlerClauses -> handlerClauses ',' . handlerClause    (rule 28)

	return         shift, and enter state 62
	finally        shift, and enter state 63
	var            shift, and enter state 64

	handlerClause  goto state 98

State 95

	value -> rec nvar nvars '->' . comp                 (rule 20)

	return         shift, and enter state 23
	do             shift, and enter state 24
	if             shift, and enter state 25
	with           shift, and enter state 26
	case           shift, and enter state 27
	'()'           shift, and enter state 9
	'('            shift, and enter state 69
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14
	op             shift, and enter state 29

	exprInfix      goto state 16
	exprApp        goto state 17
	atom           goto state 67
	comp           goto state 97
	compTerm       goto state 20
	compInfix      goto state 21
	compApp        goto state 22

State 96

	value -> fun nvars '->' comp .                      (rule 19)

	in             reduce using rule 19
	then           reduce using rule 19
	else           reduce using rule 19
	handle         reduce using rule 19
	of             reduce using rule 19
	')'            reduce using rule 19
	'}'            reduce using rule 19
	','            reduce using rule 19
	';'            reduce using rule 19
	%eof           reduce using rule 19


State 97

	value -> rec nvar nvars '->' comp .                 (rule 20)

	in             reduce using rule 20
	then           reduce using rule 20
	else           reduce using rule 20
	handle         reduce using rule 20
	of             reduce using rule 20
	')'            reduce using rule 20
	'}'            reduce using rule 20
	','            reduce using rule 20
	';'            reduce using rule 20
	%eof           reduce using rule 20


State 98

	handlerClauses -> handlerClauses ',' handlerClause .    (rule 28)

	'}'            reduce using rule 28
	','            reduce using rule 28


State 99

	handlerClause -> return nvar '->' . comp            (rule 31)

	return         shift, and enter state 23
	do             shift, and enter state 24
	if             shift, and enter state 25
	with           shift, and enter state 26
	case           shift, and enter state 27
	'()'           shift, and enter state 9
	'('            shift, and enter state 69
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14
	op             shift, and enter state 29

	exprInfix      goto state 16
	exprApp        goto state 17
	atom           goto state 67
	comp           goto state 120
	compTerm       goto state 20
	compInfix      goto state 21
	compApp        goto state 22

State 100

	handlerClause -> finally nvar '->' . comp           (rule 33)

	return         shift, and enter state 23
	do             shift, and enter state 24
	if             shift, and enter state 25
	with           shift, and enter state 26
	case           shift, and enter state 27
	'()'           shift, and enter state 9
	'('            shift, and enter state 69
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14
	op             shift, and enter state 29

	exprInfix      goto state 16
	exprApp        goto state 17
	atom           goto state 67
	comp           goto state 119
	compTerm       goto state 20
	compInfix      goto state 21
	compApp        goto state 22

State 101

	handlerClause -> var '(' nvar . ';' nvar ')' '->' comp    (rule 32)

	';'            shift, and enter state 118


State 102

	atom -> '(' expr ',' expr ')' .                     (rule 26)

	in             reduce using rule 26
	then           reduce using rule 26
	else           reduce using rule 26
	handle         reduce using rule 26
	of             reduce using rule 26
	'()'           reduce using rule 26
	'=='           reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            reduce using rule 26
	'/'            reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	'}'            reduce using rule 26
	','            reduce using rule 26
	';'            reduce using rule 26
	'++'           reduce using rule 26
	int            reduce using rule 26
	bool           reduce using rule 26
	string         reduce using rule 26
	var            reduce using rule 26
	%eof           reduce using rule 26


State 103

	exprInfix -> '(' expr ')' .                         (rule 6)
	exprApp -> '(' expr ')' .                           (rule 9)

	in             reduce using rule 6
	then           reduce using rule 6
	else           reduce using rule 6
	handle         reduce using rule 6
	of             reduce using rule 6
	'()'           reduce using rule 9
	'=='           reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            reduce using rule 6
	'/'            reduce using rule 6
	'('            reduce using rule 9
	')'            reduce using rule 6
	'}'            reduce using rule 6
	','            reduce using rule 6
	';'            reduce using rule 6
	'++'           reduce using rule 6
	int            reduce using rule 9
	bool           reduce using rule 9
	string         reduce using rule 9
	var            reduce using rule 9
	%eof           reduce using rule 6


State 104

	compTerm -> do nvar '<-' comp in . compTerm         (rule 38)

	return         shift, and enter state 23
	do             shift, and enter state 24
	if             shift, and enter state 25
	with           shift, and enter state 26
	case           shift, and enter state 27
	'()'           shift, and enter state 9
	'('            shift, and enter state 69
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14
	op             shift, and enter state 29

	exprInfix      goto state 16
	exprApp        goto state 17
	atom           goto state 67
	compTerm       goto state 117
	compInfix      goto state 21
	compApp        goto state 22

State 105

	compTerm -> if expr then comp else . compTerm       (rule 39)

	return         shift, and enter state 23
	do             shift, and enter state 24
	if             shift, and enter state 25
	with           shift, and enter state 26
	case           shift, and enter state 27
	'()'           shift, and enter state 9
	'('            shift, and enter state 69
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14
	op             shift, and enter state 29

	exprInfix      goto state 16
	exprApp        goto state 17
	atom           goto state 67
	compTerm       goto state 116
	compInfix      goto state 21
	compApp        goto state 22

State 106

	compTerm -> case expr of '{' eitherMatch . '}'      (rule 40)

	'}'            shift, and enter state 115


State 107

	eitherMatch -> inlMatch . ',' inrMatch              (rule 52)

	','            shift, and enter state 114


State 108

	eitherMatch -> inrMatch . ',' inlMatch              (rule 53)

	','            shift, and enter state 113


State 109

	inlMatch -> inl . nvar '->' comp                    (rule 54)

	'_'            shift, and enter state 39
	var            shift, and enter state 40

	nvar           goto state 112

State 110

	inrMatch -> inr . nvar '->' comp                    (rule 55)

	'_'            shift, and enter state 39
	var            shift, and enter state 40

	nvar           goto state 111

State 111

	inrMatch -> inr nvar . '->' comp                    (rule 55)

	'->'           shift, and enter state 125


State 112

	inlMatch -> inl nvar . '->' comp                    (rule 54)

	'->'           shift, and enter state 124


State 113

	eitherMatch -> inrMatch ',' . inlMatch              (rule 53)

	inl            shift, and enter state 109

	inlMatch       goto state 123

State 114

	eitherMatch -> inlMatch ',' . inrMatch              (rule 52)

	inr            shift, and enter state 110

	inrMatch       goto state 122

State 115

	compTerm -> case expr of '{' eitherMatch '}' .      (rule 40)

	in             reduce using rule 40
	then           reduce using rule 40
	else           reduce using rule 40
	handle         reduce using rule 40
	of             reduce using rule 40
	')'            reduce using rule 40
	'}'            reduce using rule 40
	','            reduce using rule 40
	';'            reduce using rule 40
	%eof           reduce using rule 40


State 116

	compTerm -> if expr then comp else compTerm .       (rule 39)

	in             reduce using rule 39
	then           reduce using rule 39
	else           reduce using rule 39
	handle         reduce using rule 39
	of             reduce using rule 39
	')'            reduce using rule 39
	'}'            reduce using rule 39
	','            reduce using rule 39
	';'            reduce using rule 39
	%eof           reduce using rule 39


State 117

	compTerm -> do nvar '<-' comp in compTerm .         (rule 38)

	in             reduce using rule 38
	then           reduce using rule 38
	else           reduce using rule 38
	handle         reduce using rule 38
	of             reduce using rule 38
	')'            reduce using rule 38
	'}'            reduce using rule 38
	','            reduce using rule 38
	';'            reduce using rule 38
	%eof           reduce using rule 38


State 118

	handlerClause -> var '(' nvar ';' . nvar ')' '->' comp    (rule 32)

	'_'            shift, and enter state 39
	var            shift, and enter state 40

	nvar           goto state 121

State 119

	handlerClause -> finally nvar '->' comp .           (rule 33)

	'}'            reduce using rule 33
	','            reduce using rule 33


State 120

	handlerClause -> return nvar '->' comp .            (rule 31)

	'}'            reduce using rule 31
	','            reduce using rule 31


State 121

	handlerClause -> var '(' nvar ';' nvar . ')' '->' comp    (rule 32)

	')'            shift, and enter state 128


State 122

	eitherMatch -> inlMatch ',' inrMatch .              (rule 52)

	'}'            reduce using rule 52


State 123

	eitherMatch -> inrMatch ',' inlMatch .              (rule 53)

	'}'            reduce using rule 53


State 124

	inlMatch -> inl nvar '->' . comp                    (rule 54)

	return         shift, and enter state 23
	do             shift, and enter state 24
	if             shift, and enter state 25
	with           shift, and enter state 26
	case           shift, and enter state 27
	'()'           shift, and enter state 9
	'('            shift, and enter state 69
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14
	op             shift, and enter state 29

	exprInfix      goto state 16
	exprApp        goto state 17
	atom           goto state 67
	comp           goto state 127
	compTerm       goto state 20
	compInfix      goto state 21
	compApp        goto state 22

State 125

	inrMatch -> inr nvar '->' . comp                    (rule 55)

	return         shift, and enter state 23
	do             shift, and enter state 24
	if             shift, and enter state 25
	with           shift, and enter state 26
	case           shift, and enter state 27
	'()'           shift, and enter state 9
	'('            shift, and enter state 69
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14
	op             shift, and enter state 29

	exprInfix      goto state 16
	exprApp        goto state 17
	atom           goto state 67
	comp           goto state 126
	compTerm       goto state 20
	compInfix      goto state 21
	compApp        goto state 22

State 126

	inrMatch -> inr nvar '->' comp .                    (rule 55)

	'}'            reduce using rule 55
	','            reduce using rule 55


State 127

	inlMatch -> inl nvar '->' comp .                    (rule 54)

	'}'            reduce using rule 54
	','            reduce using rule 54


State 128

	handlerClause -> var '(' nvar ';' nvar ')' . '->' comp    (rule 32)

	'->'           shift, and enter state 129


State 129

	handlerClause -> var '(' nvar ';' nvar ')' '->' . comp    (rule 32)

	return         shift, and enter state 23
	do             shift, and enter state 24
	if             shift, and enter state 25
	with           shift, and enter state 26
	case           shift, and enter state 27
	'()'           shift, and enter state 9
	'('            shift, and enter state 69
	int            shift, and enter state 11
	bool           shift, and enter state 12
	string         shift, and enter state 13
	var            shift, and enter state 14
	op             shift, and enter state 29

	exprInfix      goto state 16
	exprApp        goto state 17
	atom           goto state 67
	comp           goto state 130
	compTerm       goto state 20
	compInfix      goto state 21
	compApp        goto state 22

State 130

	handlerClause -> var '(' nvar ';' nvar ')' '->' comp .    (rule 32)

	'}'            reduce using rule 32
	','            reduce using rule 32


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 56
Number of terminals: 37
Number of non-terminals: 18
Number of states: 131
